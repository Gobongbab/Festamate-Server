name: Java CI

# 워크플로우 트리거 조건 설정
on:
  pull_request:
    # develop 브랜치에 대한 PR일 때만 실행
    branches: [ develop ]
    # 다음 파일들이 변경되었을 때는 워크플로우를 실행하지 않음
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

# GitHub Actions 워크플로우의 권한 설정
permissions:
  # 리포지토리 콘텐츠에 대한 읽기 권한만 부여
  contents: read
  pull-requests: write # PR 코멘트를 위한 권한 추가

jobs:
  build:
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest

    steps:
      # 1) 워크플로우 실행 전 기본적으로 체크아웃 필요
      - uses: actions/checkout@v3

      # 도커 컴포즈를 통한 컨테이너 실행 (개발환경 전용)(빌드 테스트 통과 목적)
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Start Docker-compose
        working-directory: ./
        run: docker-compose up -d

      - name: Wait For MySQL to be ready
        # nc -z : netcat 명령어로 포트 연결 확인
        # 최대 30번60초(2초 × 30회) 반복하며 MySQL 포트(13306)의 연결 상태를 체크합니다.
        run: |
          for i in {1..30}; do  
            nc -z localhost 13306 && echo "MySQL is ready!" && exit 0
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL did not become ready in time!" && exit 1

      # 2) JDK 17 버전 설치, 다른 JDK 버전을 사용한다면 수정 필요
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3)권한 부여 >> 리눅스 명령어다
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash


      # 4) .build시작 >> 리눅스 명령어다.
      # 빌드와 테스트를 함께 실행
      - name: Build and Test with Gradle
        run: ./gradlew clean build
        shell: bash