name: Java CD

on:
  pull_request:
    # develop 브랜치에 대한 PR일 때만 실행
    branches: [ develop ]
    # 다음 파일들이 변경되었을 때는 워크플로우를 실행하지 않음
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 워크플로우가 실행되는 러너(가상 머신)에 해당 리포지토리의 코드를 클론하기 위해 사용
      - name: Checkout code
        uses: actions/checkout@v3

      # 6) Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8) Docker Compose 빌드 및 푸시
      - name: Build and push with Docker Compose
        run: |
          # 서비스 이름을 태그에 포함시켜 이미지 빌드 및 푸시
          docker compose -f docker-compose-dev.yml build
          docker compose -f docker-compose-dev.yml push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      # 9) EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # 환경 변수 파일 생성 (민감한 정보는 GitHub Secrets에서 가져옴)
            cat > .env << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASS=${{ secrets.DB_PASS }}
            EOF
            
            # 이전 컨테이너 중지 및 제거
            docker compose down || true
            
            # 최신 이미지 pull
            docker compose pull
            
            # 컨테이너 시작
            docker compose up -d
            
            # 사용하지 않는 이미지 정리
            docker image prune -af
