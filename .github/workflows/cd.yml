name: Java CD

on:
  pull_request:
    # develop 브랜치에 대한 PR일 때만 실행
    branches: [ develop ]
    # 다음 파일들이 변경되었을 때는 워크플로우를 실행하지 않음
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  build-and-deploy:
    # CI가 성공한 경우에만 실행
    runs-on: ubuntu-latest

    steps:
      # 1) 워크플로우 실행 전 기본적으로 체크아웃 필요
      - name: Checkout code
        uses: actions/checkout@v3

      # Gradle 의존성에 대한 캐싱 추가 (매 빌드마다 의존성을 다시 다운로드하게 되어 빌드 시간이 길어지는 걸 방지)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 2) JDK 17 버전 설치, 다른 JDK 버전을 사용한다면 수정 필요
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3)권한 부여 >> 리눅스 명령어다
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      # 4) .build시작 >> 리눅스 명령어다.
      # 빌드와 테스트를 함께 실행
      - name: Build and Test with Gradle
        run: ./gradlew clean build
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.dev  # Dockerfile.dev 사용
          push: true # 이미지를 Docker Hub에 푸시할지 여부
          tags: ${{ secrets.DOCKER_USERNAME }}/festamate:latest # 이미지 태그 설정

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 환경 변수 파일 생성 (민감한 정보는 GitHub Secrets에서 가져옴)
            cat > .env << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASS=${{ secrets.DB_PASS }}
            EOF
            
            # 이전 컨테이너 중지 및 제거
            docker-compose down
            
            # 최신 이미지 pull
            docker-compose pull
            
            # 컨테이너 시작
            docker-compose up -d
            
            # 사용하지 않는 이미지 정리 (선택사항)
            docker image prune -af
