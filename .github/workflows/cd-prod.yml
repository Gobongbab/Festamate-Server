name: Java CD-Prod

on:
  pull_request:
    branches: [ main ] # 운영 브랜치 (main)
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest #  GitHub Actions 워크플로우를 실행할 가상 머신의 운영체제를 지정하는 것, 이 설정은 워크플로우가 실행되는 환경일 뿐, 최종적으로 배포될 EC2 인스턴스의 운영체제와는 직접적인 관련이 없다.

    steps:
      # 1) 워크플로우가 실행되는 러너(가상 머신)에 해당 리포지토리의 코드를 클론하기 위해 사용
      - name: Checkout code
        uses: actions/checkout@v3

      # Gradle 의존성에 대한 캐싱 추가 (매 빌드마다 의존성을 다시 다운로드하게 되어 빌드 시간이 길어지는 걸 방지)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 2) JDK 17 버전 설치, 다른 JDK 버전을 사용한다면 수정 필요
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3)권한 부여 >> 리눅스 명령어
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      # 4) .env 파일 생성
      - name: Make .env file
        run: |
          # .env 파일 생성 및 환경 변수 추가
          echo "ENV=${{ secrets.ENV }}" > .env

      # 5) .build시작 >> 리눅스 명령어다.
      # 빌드와 테스트를 함께 실행
      - name: Build and Test with Gradle
        run: |
          ./gradlew clean build -x test
        shell: bash

      # 6) Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7) Docker Compose 빌드 및 푸시
      - name: Build and push with Docker Compose
        run: |
          # 서비스 이름을 태그에 포함시켜 이미지 빌드 및 푸시 (운영 환경에 맞는 docker-compose 파일 사용)
          docker compose -f docker-compose-prod.yml build
          docker compose -f docker-compose-prod.yml push

      # 8) EC2에 배포 (Bastion Host 경유)
      - name: Deploy to EC2 (via Bastion Host)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BASTION_HOST }} # Bastion Host의 Public IP 또는 DNS
          username: ${{ secrets.BASTION_USERNAME }} # Bastion Host 접속 사용자 이름
          key: ${{ secrets.BASTION_PRIVATE_KEY }} # Bastion Host 접속 Private Key
          script: |
            # Private EC2 인스턴스 정보
            export  PRIVATE_EC2_HOST_1="${{ secrets.PROD_EC2_HOST_1 }}" # 첫 번째 운영용 EC2 Private IP
            export  PRIVATE_EC2_HOST_2="${{ secrets.PROD_EC2_HOST_2 }}" # 두 번째 운영용 EC2 Private IP
            export  PRIVATE_EC2_USERNAME="${{ secrets.PROD_EC2_USERNAME }}" # Private EC2 인스턴스 접속 사용자 이름
            export  PROD_EC2_PRIVATE_KEY_PATH="${{ secrets.PROD_EC2_PRIVATE_KEY_PATH }}" # Bastion Host에 있어야 함

            # --- 첫 번째 운영용 EC2 배포 ---
            echo "Deploying to Host1..."

            # Docker Hub 로그인 (Private EC2 - 첫 번째 서버)
            ssh -i '${{ secrets.PROD_EC2_PRIVATE_KEY_PATH }}' "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin"

            # 이전 컨테이너 중지 및 제거 (Private EC2 - 첫 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "docker stop festamate || true"
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "docker rm festamate || true"

            # 최신 이미지 pull (Private EC2 - 첫 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "docker pull gobongbab/festamate:latest"

            # 컨테이너 시작 (Private EC2 - 첫 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "docker run -d --name festamate -p 80:8080 --env-file .env gobongbab/festamate:latest"

            # 사용하지 않는 이미지 정리 (Private EC2 - 첫 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_1" "docker image prune -af"

            echo "Deployment to Host1 complete."

            echo ""
            echo "--------------------------------------------------"
            echo ""

            # --- 두 번째 운영용 EC2 배포 ---
            echo "Deploying to Host2..."

            # Docker Hub 로그인 (Private EC2 - 두 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin"

            # 이전 컨테이너 중지 및 제거 (Private EC2 - 두 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "docker stop festamate || true"
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "docker rm festamate || true"

            # 최신 이미지 pull (Private EC2 - 두 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "docker pull gobongbab/festamate:latest"

            # 컨테이너 시작 (Private EC2 - 두 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "docker run -d --name festamate -p 80:8080 --env-file .env gobongbab/festamate:latest"

            # 사용하지 않는 이미지 정리 (Private EC2 - 두 번째 서버)
            ssh -i "$PROD_EC2_PRIVATE_KEY_PATH" "$PRIVATE_EC2_USERNAME@$PRIVATE_EC2_HOST_2" "docker image prune -af"

            echo "Deployment to Host2 complete."
