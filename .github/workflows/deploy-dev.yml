# 워크플로우의 이름을 지정
name: Deploy to Development Environment

# 워크플로우가 실행될 트리거 조건 설정
on:
  # develop 브랜치에 push가 발생했을 때 실행
  push:
    branches:
      - develop
  # develop 브랜치로 PR이 생성됐을 때 실행
  pull_request:
    branches:
      - develop

# 실행될 작업들을 정의
jobs:
  # 작업의 이름을 'build-and-deploy'로 지정
  build-and-deploy:
    # 작업이 실행될 러너(실행 환경)를 Ubuntu 최신 버전으로 지정
    runs-on: ubuntu-latest

    # 실행될 단계들을 정의
    steps:
      # GitHub 저장소의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Java 개발 환경(JDK 17) 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle을 사용하여 프로젝트 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secrets에 저장된 Docker Hub 사용자명
          password: ${{ secrets.DOCKER_PASSWORD }}  # GitHub Secrets에 저장된 Docker Hub 비밀번호

      # Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # 도커 빌드 컨텍스트 위치
          push: true  # 이미지를 Docker Hub에 푸시할지 여부
          tags: ${{ secrets.DOCKER_USERNAME }}/festa-mate:latest  # 이미지 태그 설정

      # EC2 인스턴스에 SSH로 접속하여 배포 명령 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스의 호스트 주소
          username: ${{ secrets.EC2_USERNAME }}  # EC2 접속 사용자명
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 접속용 SSH 키
          script: |  # EC2에서 실행할 명령어들
            # 최신 도커 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/festa-mate:latest
            # 실행 중인 모든 컨테이너 중지 (실패해도 계속 진행)
            docker stop $(docker ps -a -q) || true
            # 모든 컨테이너 삭제 (실패해도 계속 진행)
            docker rm $(docker ps -a -q) || true
            # 새로운 컨테이너 실행 (8080 포트 매핑)
            docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/festa-mate:latest
            # 사용하지 않는 이미지 정리
            docker image prune -f
